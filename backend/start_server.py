#!/usr/bin/env python3
"""
NewsMind ÂêéÁ´ØÊúçÂä°ÂêØÂä®ËÑöÊú¨
ÊîØÊåÅÂºÄÂèëÁéØÂ¢ÉÂíåÁîü‰∫ßÁéØÂ¢É
"""
import os
import sys
import argparse
from pathlib import Path

# Ê∑ªÂä†ÂΩìÂâçÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
sys.path.insert(0, str(Path(__file__).parent))

def setup_environment():
    """ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè"""
    # Á¶ÅÁî®playwrightÔºàÂ¶ÇÊûúÁéØÂ¢É‰∏çÊîØÊåÅÔºâ
    if os.environ.get('DISABLE_PLAYWRIGHT'):
        print("‚ö†Ô∏è  PlaywrightÂ∑≤Á¶ÅÁî®Ôºå‰ΩøÁî®ÁÆÄÂåñÊ®°Âºè")
    
    # ËÆæÁΩÆÊó•ÂøóÁ∫ßÂà´
    os.environ.setdefault('LOG_LEVEL', 'INFO')

def start_development_server():
    """ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®"""
    try:
        from app.main import app
        import uvicorn
        
        print("üöÄ ÂêØÂä®NewsMindÂºÄÂèëÊúçÂä°Âô®")
        print("üìç ËÆøÈóÆÂú∞ÂùÄ: http://localhost:8000")
        print("üìö APIÊñáÊ°£: http://localhost:8000/docs")
        print("‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂä°")
        print("-" * 50)
        
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info"
        )
    except ImportError as e:
        print(f"‚ùå ÂØºÂÖ•ÈîôËØØ: {e}")
        print("üí° ËØ∑Á°Æ‰øùÂ∑≤ÂÆâË£ÖÊâÄÈúÄ‰æùËµñ:")
        print("   pip install fastapi uvicorn sqlalchemy")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ÂêØÂä®Â§±Ë¥•: {e}")
        sys.exit(1)

def start_production_server():
    """ÂêØÂä®Áîü‰∫ßÊúçÂä°Âô®"""
    try:
        from app.main import app
        import uvicorn
        
        print("üöÄ ÂêØÂä®NewsMindÁîü‰∫ßÊúçÂä°Âô®")
        print("üìç ËÆøÈóÆÂú∞ÂùÄ: http://localhost:8000")
        print("üìö APIÊñáÊ°£: http://localhost:8000/docs")
        print("‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂä°")
        print("-" * 50)
        
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8000,
            reload=False,
            log_level="warning"
        )
    except ImportError as e:
        print(f"‚ùå ÂØºÂÖ•ÈîôËØØ: {e}")
        print("üí° ËØ∑Á°Æ‰øùÂ∑≤ÂÆâË£ÖÊâÄÈúÄ‰æùËµñ:")
        print("   pip install fastapi uvicorn sqlalchemy")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ÂêØÂä®Â§±Ë¥•: {e}")
        sys.exit(1)

def start_simple_server():
    """ÂêØÂä®ÁÆÄÂåñÊúçÂä°Âô®ÔºàÁî®‰∫éÊµãËØïÔºâ"""
    try:
        from flask import Flask, jsonify
        import sqlite3
        
        app = Flask(__name__)
        DB_PATH = "newsmind.db"
        
        @app.route('/health')
        def health():
            return jsonify({
                "status": "healthy",
                "version": "1.0.0",
                "database": "connected" if os.path.exists(DB_PATH) else "not_found"
            })
        
        @app.route('/api/v1/news/articles')
        def get_articles():
            try:
                from flask import request
                
                # Ëé∑ÂèñÂàÜÈ°µÂèÇÊï∞
                skip = request.args.get('skip', 0, type=int)
                limit = request.args.get('limit', 20, type=int)
                category = request.args.get('category', None)
                language = request.args.get('language', None)
                date_filter = request.args.get('date', None)  # Êñ∞Â¢ûÊó•ÊúüÁ≠õÈÄâÂèÇÊï∞
                
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                # ÊûÑÂª∫Êü•ËØ¢Êù°‰ª∂
                where_conditions = []
                params = []
                
                if category:
                    where_conditions.append("category = ?")
                    params.append(category)
                
                if language:
                    where_conditions.append("language = ?")
                    params.append(language)
                
                # Ê∑ªÂä†Êó•ÊúüÁ≠õÈÄâ
                if date_filter:
                    if date_filter == 'today':
                        # Á≠õÈÄâ‰ªäÊó•Êñ∞Èóª
                        where_conditions.append("DATE(created_at) = DATE('now')")
                    elif date_filter == 'yesterday':
                        # Á≠õÈÄâÊò®Êó•Êñ∞Èóª
                        where_conditions.append("DATE(created_at) = DATE('now', '-1 day')")
                    elif date_filter == 'week':
                        # Á≠õÈÄâÊú¨Âë®Êñ∞Èóª
                        where_conditions.append("DATE(created_at) >= DATE('now', '-7 days')")
                    elif date_filter == 'month':
                        # Á≠õÈÄâÊú¨ÊúàÊñ∞Èóª
                        where_conditions.append("DATE(created_at) >= DATE('now', '-30 days')")
                    else:
                        # Ëá™ÂÆö‰πâÊó•ÊúüÊ†ºÂºè YYYY-MM-DD
                        try:
                            from datetime import datetime
                            datetime.strptime(date_filter, '%Y-%m-%d')
                            where_conditions.append("DATE(created_at) = ?")
                            params.append(date_filter)
                        except ValueError:
                            pass  # ÂøΩÁï•Êó†ÊïàÊó•ÊúüÊ†ºÂºè
                
                where_clause = ""
                if where_conditions:
                    where_clause = "WHERE " + " AND ".join(where_conditions)
                
                # ÊâßË°åÊü•ËØ¢
                query = f"""
                    SELECT id, title, content, source_name, publish_time, category, language, created_at
                    FROM news_articles 
                    {where_clause}
                    ORDER BY created_at DESC 
                    LIMIT ? OFFSET ?
                """
                params.extend([limit, skip])
                
                cursor.execute(query, params)
                articles = []
                for row in cursor.fetchall():
                    articles.append({
                        "id": row[0],
                        "title": row[1],
                        "content": row[2][:200] + "..." if len(row[2]) > 200 else row[2],
                        "source_name": row[3],
                        "publish_time": row[4],
                        "category": row[5],
                        "language": row[6],
                        "created_at": row[7]
                    })
                conn.close()
                return jsonify({"articles": articles, "total": len(articles)})
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/api/v1/news/statistics')
        def get_statistics():
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                cursor.execute("SELECT COUNT(*) FROM news_articles")
                total_articles = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM news_articles WHERE is_processed = 1")
                processed_articles = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM news_sources WHERE is_active = 1")
                active_sources = cursor.fetchone()[0]
                
                conn.close()
                
                return jsonify({
                    "total_articles": total_articles,
                    "processed_articles": processed_articles,
                    "active_sources": active_sources
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/api/v1/ai/processed-articles')
        def get_processed_articles():
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT id, title, content, source_name, publish_time, category, language
                    FROM news_articles 
                    WHERE is_processed = 1
                    ORDER BY created_at DESC 
                    LIMIT 20
                """)
                articles = []
                for row in cursor.fetchall():
                    articles.append({
                        "id": row[0],
                        "title": row[1],
                        "content": row[2][:200] + "..." if len(row[2]) > 200 else row[2],
                        "source_name": row[3],
                        "publish_time": row[4],
                        "category": row[5],
                        "language": row[6]
                    })
                conn.close()
                return jsonify({"articles": articles, "total": len(articles)})
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/api/v1/news/articles/<int:article_id>')
        def get_article(article_id):
            """Ëé∑ÂèñÂçïÁØáÊñáÁ´†ËØ¶ÊÉÖ"""
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, title, content, source_url, source_name, publish_time, 
                           category, language, quality_score, is_processed, created_at
                    FROM news_articles 
                    WHERE id = ?
                """, (article_id,))
                
                row = cursor.fetchone()
                if not row:
                    conn.close()
                    return jsonify({"error": "Article not found"}), 404
                
                article = {
                    "id": row[0],
                    "title": row[1],
                    "content": row[2],
                    "source_url": row[3],
                    "source_name": row[4],
                    "publish_time": row[5],
                    "category": row[6],
                    "language": row[7],
                    "quality_score": row[8],
                    "is_processed": bool(row[9]),
                    "created_at": row[10]
                }
                
                # Ëé∑ÂèñÂ§ÑÁêÜÁªìÊûúÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
                cursor.execute("""
                    SELECT summary_zh, summary_en, translation_zh, quality_score, processing_time
                    FROM processed_content 
                    WHERE article_id = ?
                """, (article_id,))
                
                processed_row = cursor.fetchone()
                if processed_row:
                    article["processed_content"] = {
                        "summary_zh": processed_row[0],
                        "summary_en": processed_row[1],
                        "translation_zh": processed_row[2],
                        "quality_score": processed_row[3],
                        "processing_time": processed_row[4]
                    }
                else:
                    article["processed_content"] = None
                
                conn.close()
                return jsonify(article)
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/api/v1/ai/process/<int:article_id>', methods=['POST'])
        def process_article(article_id):
            """Â§ÑÁêÜÂçïÁØáÊñáÁ´†"""
            try:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                # Ê£ÄÊü•ÊñáÁ´†ÊòØÂê¶Â≠òÂú®
                cursor.execute("SELECT id, title, content, language FROM news_articles WHERE id = ?", (article_id,))
                row = cursor.fetchone()
                if not row:
                    conn.close()
                    return jsonify({"error": "Article not found"}), 404
                
                # Ê®°ÊãüAIÂ§ÑÁêÜÔºàÁÆÄÂåñÊ®°ÂºèÔºâ
                article_id, title, content, language = row
                
                # ÁîüÊàêÁÆÄÂçïÁöÑÊëòË¶ÅÂíåÁøªËØë
                summary_zh = f"ËøôÊòØÊñáÁ´†„Ää{title}„ÄãÁöÑ‰∏≠ÊñáÊëòË¶Å„ÄÇ"
                summary_en = f"This is the English summary of article '{title}'."
                translation_zh = None
                if language == 'en':
                    translation_zh = f"ËøôÊòØÊñáÁ´†„Ää{title}„ÄãÁöÑ‰∏≠ÊñáÁøªËØë„ÄÇ"
                
                # ‰øùÂ≠òÂ§ÑÁêÜÁªìÊûú
                cursor.execute("""
                    INSERT OR REPLACE INTO processed_content 
                    (article_id, summary_zh, summary_en, translation_zh, quality_score, processing_time)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (article_id, summary_zh, summary_en, translation_zh, 7.5, 2.0))
                
                # Êõ¥Êñ∞ÊñáÁ´†Â§ÑÁêÜÁä∂ÊÄÅ
                cursor.execute("UPDATE news_articles SET is_processed = 1 WHERE id = ?", (article_id,))
                
                conn.commit()
                conn.close()
                
                return jsonify({
                    "message": f"Article {article_id} processed successfully",
                    "results": {
                        "success_count": 1,
                        "error_count": 0
                    }
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/api/v1/ai/process', methods=['POST'])
        def process_articles():
            """ÊâπÈáèÂ§ÑÁêÜÊñáÁ´†"""
            try:
                from flask import request
                limit = request.args.get('limit', 5, type=int)
                
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                
                # Ëé∑ÂèñÊú™Â§ÑÁêÜÁöÑÊñáÁ´†
                cursor.execute("""
                    SELECT id, title, content, language 
                    FROM news_articles 
                    WHERE is_processed = 0 
                    ORDER BY created_at DESC 
                    LIMIT ?
                """, (limit,))
                
                articles = cursor.fetchall()
                success_count = 0
                error_count = 0
                
                for article_id, title, content, language in articles:
                    try:
                        # Ê®°ÊãüAIÂ§ÑÁêÜ
                        summary_zh = f"ËøôÊòØÊñáÁ´†„Ää{title}„ÄãÁöÑ‰∏≠ÊñáÊëòË¶Å„ÄÇ"
                        summary_en = f"This is the English summary of article '{title}'."
                        translation_zh = None
                        if language == 'en':
                            translation_zh = f"ËøôÊòØÊñáÁ´†„Ää{title}„ÄãÁöÑ‰∏≠ÊñáÁøªËØë„ÄÇ"
                        
                        # ‰øùÂ≠òÂ§ÑÁêÜÁªìÊûú
                        cursor.execute("""
                            INSERT OR REPLACE INTO processed_content 
                            (article_id, summary_zh, summary_en, translation_zh, quality_score, processing_time)
                            VALUES (?, ?, ?, ?, ?, ?)
                        """, (article_id, summary_zh, summary_en, translation_zh, 7.5, 2.0))
                        
                        # Êõ¥Êñ∞ÊñáÁ´†Â§ÑÁêÜÁä∂ÊÄÅ
                        cursor.execute("UPDATE news_articles SET is_processed = 1 WHERE id = ?", (article_id,))
                        
                        success_count += 1
                    except Exception as e:
                        error_count += 1
                        print(f"Error processing article {article_id}: {e}")
                
                conn.commit()
                conn.close()
                
                return jsonify({
                    "message": "AI processing completed",
                    "results": {
                        "total_articles": len(articles),
                        "success_count": success_count,
                        "error_count": error_count
                    }
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        print("üöÄ ÂêØÂä®NewsMindÁÆÄÂåñÊµãËØïÊúçÂä°Âô®")
        print("üìç ËÆøÈóÆÂú∞ÂùÄ: http://localhost:8000")
        print("üìö ÂÅ•Â∫∑Ê£ÄÊü•: http://localhost:8000/health")
        print("üì∞ Êñ∞ÈóªÂàóË°®: http://localhost:8000/api/v1/news/articles")
        print("üìä ÁªüËÆ°‰ø°ÊÅØ: http://localhost:8000/api/v1/news/statistics")
        print("ü§ñ AIÂ§ÑÁêÜ: http://localhost:8000/api/v1/ai/processed-articles")
        print("‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂä°")
        print("-" * 50)
        
        app.run(host='0.0.0.0', port=8000, debug=False)
        
    except ImportError as e:
        print(f"‚ùå ÂØºÂÖ•ÈîôËØØ: {e}")
        print("üí° ËØ∑ÂÆâË£ÖFlask:")
        print("   pip install flask")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ÂêØÂä®Â§±Ë¥•: {e}")
        sys.exit(1)

def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description='NewsMind ÂêéÁ´ØÊúçÂä°ÂêØÂä®ËÑöÊú¨')
    parser.add_argument('--mode', choices=['dev', 'prod', 'simple'], 
                       default='dev', help='ÂêØÂä®Ê®°Âºè (ÈªòËÆ§: dev)')
    parser.add_argument('--disable-playwright', action='store_true',
                       help='Á¶ÅÁî®playwright')
    
    args = parser.parse_args()
    
    # ËÆæÁΩÆÁéØÂ¢É
    if args.disable_playwright:
        os.environ['DISABLE_PLAYWRIGHT'] = '1'
    
    setup_environment()
    
    # Ê†πÊçÆÊ®°ÂºèÂêØÂä®ÊúçÂä°
    if args.mode == 'dev':
        start_development_server()
    elif args.mode == 'prod':
        start_production_server()
    elif args.mode == 'simple':
        start_simple_server()

if __name__ == '__main__':
    main() 